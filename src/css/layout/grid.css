/*
 * Grid
 * Minimal grid system with auto-layout columns
 */

/**
 * Display child elements in a basic grid with fixed item widths.
 */
.ds-grid,
.grid {
  display: grid;
  gap: var(--gap);
  grid-template-columns: minmax(var(--w-min), 1fr);

  @media (min-width: 36rem) {
    grid-template-columns: 1fr 1fr;

    & .ds-grid-item-large {
      grid-column: span 2;
    }
  }

  @media (min-width: 60rem) {
    grid-template-columns: 1fr 1fr 1fr;
  }

  & > * {
    min-width: 0; /* HACK for children in overflow */
  }
}

/**
 * Display elements in a basic grid with flexible item widths.
 */
.ds-flexgrid {
  display: flex; 
  flex-flow: row wrap; 
  gap: var(--gap);
  
  & > * {
    max-width: var(--w-max);
    min-width: var(--w-min);
  }
}

.ds-grid-2-1,
.ds-grid-1-2 {
  display: grid;
  gap: var(--gap);
  grid-template-columns: 1fr;
}

@media (min-width: 60rem) {

  /**
   * Display two elements in a row, the first element being twice the size of the last element.
   */
  .ds-grid-2-1 {
    grid-template-columns: 2fr 1fr;
  }

  /**
   * Display two elements in a row, the last element being twice the size of the first element.
   */
  .ds-grid-1-2 {
    grid-template-columns: 1fr 2fr;
  }

}

.ds-flex-row,
.ds-flex-column {
  display: flex;
  flex-wrap: nowrap;
  gap: var(--gap);

  & > * {
    margin: 0;
  }
}

/**
 * Display elements in a neat row
 */
.ds-flex-row {
  flex-direction: row;
  align-items: center;
  justify-content: flex-start;
}

/**
 * Display elements in a neat column
 */
.ds-flex-column {
  flex-direction: column;
  align-items: stretch;
  justify-content: flex-start;
}